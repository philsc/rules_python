load("@rules_python//python:defs.bzl", "py_binary", "py_test")
load("@rules_python//python:pip.bzl", "compile_pip_requirements")
load("@bazel_skylib//lib:versions.bzl", "versions")
load("@bazel_skylib//lib:selects.bzl", "selects")
load("@bazel_skylib//rules:diff_test.bzl", "diff_test")

py_binary(
    name = "main",
    srcs = ["main.py"],
    deps = [
        "@pypi//pkg_a",
    ],
)

py_test(
    name = "main_test",
    srcs = ["main_test.py"],
    deps = [":main"],
)

# This rule adds a convenient way to update the requirements file.
compile_pip_requirements(
    name = "requirements",
    intermediate_file = {
        "@//:py310_linux_aarch64": "intermediate_file_py310_linux_aarch64.json",
        "@//:py310_linux_x86_64": "intermediate_file_py310_linux_x86_64.json",
        "@//:py311_linux_aarch64": "intermediate_file_py311_linux_aarch64.json",
        "@//:py311_linux_x86_64": "intermediate_file_py311_linux_x86_64.json",
    },
    # That binary will let users modify the intermediate file. Then they can:
    # - Inject dependencies.
    # - Remove dependencies.
    # - Drop whole packages (is there such a use case?).
    # - Add patches.
    # - Override/create aliases (support needed).
    intermediate_file_patcher = "//:intermediate_file_patcher",
    requirements_in = "requirements.in",
    # Pass in a select-like value that lets the macro decide what to do with
    # the file. Having these values as dictionaries allows us to do some
    # validation before the underlying targets get instantiated.
    requirements_txt = {
        "@//:py310_linux_aarch64": "requirements_lock_py310_linux_aarch64.txt",
        "@//:py310_linux_x86_64": "requirements_lock_py310_linux_x86_64.txt",
        "@//:py311_linux_aarch64": "requirements_lock_py311_linux_aarch64.txt",
        "@//:py311_linux_x86_64": "requirements_lock_py311_linux_x86_64.txt",
    },
    extra_args = [
        # Since we may frequently tweak the wheels for development, we can't
        # really rely on consistent hashes.
        "--no-reuse-hashes",
        # Point at the server run via:
        # bazel run //wheels:pypiserver_runner
        "--index-url",
        "http://localhost:8989/simple/",
    ],
)

py_binary(
    name = "intermediate_file_patcher",
    srcs = ["intermediate_file_patcher.py"],
)

config_setting(
    name = "linux_aarch64",
    constraint_values = [
        "@platforms//cpu:aarch64",
        "@platforms//os:linux",
    ],
)

config_setting(
    name = "linux_x86_64",
    constraint_values = [
        "@platforms//cpu:x86_64",
        "@platforms//os:linux",
    ],
)

[selects.config_setting_group(
    name = "py{}_{}".format(py_version.replace(".", ""), platform),
    match_all = [
        "@rules_python//python/config_settings:is_python_{}".format(py_version),
        ":{}".format(platform),
    ],
) for py_version in (
    "3.10",
    "3.11",
) for platform in (
    "linux_aarch64",
    "linux_x86_64",
)]

genquery(
    name = "pkg_a_deps",
    expression = """filter(@pypi//, kind(".* rule", deps(@pypi//pkg_a)))""",
    opts = ["--notool_deps"],
    scope = ["@pypi//pkg_a"],
)

# TODO(phil): This doesn't work. Find a way to make this work.
#IS_BAZEL_6 = versions.parse(versions.get())[0] < 7

diff_test(
    name = "pkg_a_deps_test",
    file1 = ":pkg_a_deps",
    #file2 = "pkg_a_deps_bazel_6.txt" if IS_BAZEL_6 else "pkg_a_deps.txt",
    file2 = "pkg_a_deps.txt",
)

genquery(
    name = "pkg_d_deps",
    expression = """filter(@pypi//, kind(".* rule", deps(@pypi//pkg_d)))""",
    opts = ["--notool_deps"],
    scope = ["@pypi//pkg_d"],
)

diff_test(
    name = "pkg_d_deps_test",
    file1 = ":pkg_d_deps",
    #file2 = "pkg_d_deps_bazel_6.txt" if IS_BAZEL_6 else "pkg_d_deps.txt",
    file2 = "pkg_d_deps.txt",
)
